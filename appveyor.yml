version: 2.6.2.{build}
image: Visual Studio 2022

environment:
  PYTHON_VERSIONS: 36, 37, 38, 39, 310, 311, 312
  # 2023-01-18 conda-build currently not supported for python 3.11 https://github.com/conda/conda/issues/11170
  # they added support for conda >= v23.5.0 but 32bit version is stuck at v4.x
  #CONDA_SKIP_PYTHON_VERSIONS_64: 311
  CONDA_SKIP_PYTHON_VERSIONS_32: 311, 312

  matrix:
    - job_name: Build Wheels - Tesseract 3.x
      job_group: Build Wheels
      VCPKG_COMMIT_ID: 1e9facc # Leptonica 1.82.0 (https://github.com/microsoft/vcpkg/blob/master/ports/leptonica/vcpkg.json)
      TESSERACT_COMMIT_ID: 7e5f0d6 # Tesseract 3.05.02

    - job_name: Build Conda Packages - Tesseract 3.x
      job_group: Build Conda Packages
      job_depends_on: Build Wheels - Tesseract 3.x

    - job_name: Build Wheels - Tesseract 4.x
      job_group: Build Wheels
      VCPKG_COMMIT_ID: 1e9facc # Leptonica 1.82.0 (https://github.com/microsoft/vcpkg/blob/master/ports/leptonica/vcpkg.json)
      TESSERACT_COMMIT_ID: f38e7a7 # Tesseract 4.1.3

    - job_name: Build Conda Packages - Tesseract 4.x
      job_group: Build Conda Packages
      job_depends_on: Build Wheels - Tesseract 4.x

    - job_name: Build Wheels - Tesseract 5.x
      job_group: Build Wheels
      VCPKG_COMMIT_ID: ddea2bb # Leptonica 1.83.1 (https://github.com/microsoft/vcpkg/blob/master/ports/leptonica/vcpkg.json)
      TESSERACT_COMMIT_ID: e082522 # Tesseract 5.3.3

    - job_name: Build Conda Packages - Tesseract 5.x
      job_group: Build Conda Packages
      job_depends_on: Build Wheels - Tesseract 5.x

# don't build if only readme changed
skip_commits:
  files:
    - README.md

# the first failed job cancels other jobs and fails entire build
matrix:
  fast_finish: true

for:
  - matrix:
      only:
        - job_group: Build Wheels

    build_script:
      - pwsh: |      
          #$blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
          
          # pull tesserocr submodule
          git submodule update --init --recursive

          # copy files into newly pulled submodule
          Copy-Item -Path "res\setup.py" -Destination "tesserocr"
          Copy-Item -Path "res\tesserocr" -Destination "tesserocr" -Recurse
          
          # apply tesserocr patches
          cd tesserocr
          
          $patch_directory = "..\res\patches\tesserocr"

          $patch_files = @(
              # addresses this issue for tesseract 5.x https://github.com/sirfz/tesserocr/issues/295
              "disable_lstm_choices_test.patch"
          )

          Foreach ($patch_file in $patch_files)
          {
              $full_path = Join-Path -Path $patch_directory -ChildPath $patch_file
              "applying ""$full_path"""
              git apply "$full_path"
          }
          
          cd ..

          # ------ Build Leptonica ----------------------------------------

          # install and initialize vcpkg
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          git checkout $env:VCPKG_COMMIT_ID
          .\bootstrap-vcpkg.bat

          # set VCPKG_PATH for setup.py
          $env:VCPKG_PATH = "$PWD"

          # prevent debug build
          Add-Content -Path .\triplets\x64-windows.cmake -Value 'set(VCPKG_BUILD_TYPE release)'
          Add-Content -Path .\triplets\x86-windows.cmake -Value 'set(VCPKG_BUILD_TYPE release)'

          # build Leptonica x64 and x86
          .\vcpkg.exe install leptonica:x64-windows leptonica:x86-windows

          cd ..

          # ------ Build Tesseract ----------------------------------------

          # prepare install directories
          $tesseract_install_64 = Join-Path -Path $PWD -ChildPath "tesseract_install_64"
          $tesseract_install_32 = Join-Path -Path $PWD -ChildPath "tesseract_install_32"
          New-Item $tesseract_install_64 -ItemType Directory
          New-Item $tesseract_install_32 -ItemType Directory

          # clone and checkout Tesseract
          git clone https://github.com/tesseract-ocr/tesseract.git
          cd tesseract
          git checkout $env:TESSERACT_COMMIT_ID

          # store Tesseract version in env variable for setup.py
          if (Test-Path ".\VERSION" -PathType Leaf) {
            $env:TESSERACT_VERSION = Get-Content -Path .\VERSION -TotalCount 1
          } elseif (Test-Path ".\api\baseapi.h" -PathType Leaf) {
            # older version -> get version from ".\api\baseapi.h"
            $content = Get-Content -Path ".\api\baseapi.h" -Raw
            $match_found = $content -match 'TESSERACT_VERSION_STR "(.*)"'
            $env:TESSERACT_VERSION = $Matches[1]
          }

          # apply patches if any (not needed anymore since switch to CMake)
          $patch_directory = "..\res\patches\tesseract\$env:TESSERACT_COMMIT_ID"

          if (Test-Path -Path $patch_directory) {
            Get-ChildItem $patch_directory | 
            Foreach-Object {
                "applying $_"
                git apply $_.FullName
            }
          } else {
            "no patches found for Tesseract commit $env:TESSERACT_COMMIT_ID"
          }

          # build Tesseract x64 and x86
          cmake -G "Visual Studio 17 2022" -A x64 -S . -B "build_64" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="$tesseract_install_64" -DCMAKE_PREFIX_PATH="$tesseract_install_64" -DBUILD_TRAINING_TOOLS=OFF -DSW_BUILD=OFF -DBUILD_SHARED_LIBS=ON -DOPENMP_BUILD=OFF -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_PATH\scripts\buildsystems\vcpkg.cmake"
          cmake -G "Visual Studio 17 2022" -A Win32 -S . -B "build_32" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="$tesseract_install_32" -DCMAKE_PREFIX_PATH="$tesseract_install_32" -DBUILD_TRAINING_TOOLS=OFF -DSW_BUILD=OFF -DBUILD_SHARED_LIBS=ON -DOPENMP_BUILD=OFF -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_PATH\scripts\buildsystems\vcpkg.cmake"

          cmake --build build_64 --config Release --target install
          cmake --build build_32 --config Release --target install

          cd ..

          # ------ Build tesserocr ----------------------------------------

          cd tesserocr
          
          # dumpbin.exe required for finding dependencies in setup.py
          $env:Path = "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin;" + $env:Path

          # for each {64bit and 32bit} x {Python Versions}
          ForEach ($platform_x64 in @($true, $false)) {
              ForEach ($py_ver in $env:PYTHON_VERSIONS -split ", ") {
                  
                  # set platform/python-version specific variables
                  # BUILD_PLATFORM and TESSERACT_VERSION are used in setup.py
                  if ($platform_x64) {
                      $env:BUILD_PLATFORM = "x64"
                      $env:TESSERACT_INSTALL_PATH = $tesseract_install_64
                      $env:Path = "C:\Python$py_ver-x64;" + $env:Path
                  } else {
                      $env:BUILD_PLATFORM = "x86"
                      $env:TESSERACT_INSTALL_PATH = $tesseract_install_32
                      $env:Path = "C:\Python$py_ver;" + $env:Path
                  }

                  # upgrade pip
                  python -m pip install --upgrade pip
                  
                  # install requirements
                  python -m pip install --no-warn-script-location --no-input --only-binary :all: -r requirements-dev.txt
                  
                  # build wheel
                  python setup.py bdist_wheel
              }
          }

          # create archive for convenience
          $env:TESSERACT_VERSION | Out-File -FilePath tesseract_version.txt
          $zip_name = "wheels_" + $env:APPVEYOR_BUILD_VERSION + ".zip"
          Compress-Archive -Path dist\*.whl, tesseract_version.txt -DestinationPath dist\$zip_name

    test_script:
      - pwsh: |      
          # test suite needs TESSDATA_PREFIX to point to a valid tessdata location 
          $env:TESSDATA_PREFIX = "$PWD\res\tessdata"

          # for each {64bit and 32bit} x {Python Versions}
          ForEach ($platform_x64 in @($true, $false)) {
              ForEach ($py_ver in $env:PYTHON_VERSIONS -split ", ") {
                  
                  # set platform/python-version specific variables
                  if ($platform_x64) {
                      $env:Path = "C:\Python$py_ver-x64;" + $env:Path
                      $wheel_path = Get-ChildItem -Path tesserocr\dist\*cp$py_ver*amd64*.whl
                  } else {
                      $env:Path = "C:\Python$py_ver;" + $env:Path
                      $wheel_path = Get-ChildItem -Path tesserocr\dist\*cp$py_ver*win32*.whl
                  }
                  
                  # install previously built wheels
                  python -m pip install $wheel_path
                  
                  # execute test suite
                  python tesserocr\tests\test_api.py
                  
                  # throw immediately if not all test passed
                  if ($LastExitCode -ne 0) { exit $LastExitCode }
              }
          }

    artifacts:
      - path: tesserocr\dist\*.whl
        name: wheel
      - path: tesserocr\dist\wheels_*.zip
        name: archive

  - matrix:
      only:
        - job_group: Build Conda Packages

    build_script:
      - pwsh: |
          $conda_skip_python_versions_64 = $env:CONDA_SKIP_PYTHON_VERSIONS_64 -split ", "
          $conda_skip_python_versions_32 = $env:CONDA_SKIP_PYTHON_VERSIONS_32 -split ", "
          
          # create necessary directories
          New-Item conda_build -ItemType Directory
          New-Item tesserocr\dist -ItemType Directory

          # call AppVeyor api to get the id of the 'Build Wheels' job corresponding to this job's Tesseract version
          $request = Invoke-WebRequest -Uri "https://ci.appveyor.com/api/projects/simonflueckiger/tesserocr-windows-build/build/$env:APPVEYOR_BUILD_VERSION" -Method:Get -ContentType "application/xml"
          $job_suffix = ($env:APPVEYOR_JOB_NAME -split " ")[-1]
          $job = ([xml]$request.Content).ProjectBuildResults.Build.Jobs.BuildJobModel | Where-Object Name -match "Build Wheels.*$job_suffix"

          # piece together the wheels zip artifact url from 'Build Wheels' job
          $url = "https://ci.appveyor.com/api/buildjobs/" + $job.JobId + "/artifacts/tesserocr%2Fdist%2Fwheels_" + $env:APPVEYOR_BUILD_VERSION + ".zip"

          # download and unpack the archive
          Invoke-WebRequest $url -OutFile wheels.zip
          Expand-Archive -Path wheels.zip -DestinationPath tesserocr\dist

          # create dictionary from downloaded wheel files $packages = @{wheel; py_ver; py_ver_str; platform_x64}
          $wheels = Get-ChildItem tesserocr\dist -Filter *.whl
          $packages = @()
          ForEach($wheel in $wheels) {
              $match_found = $wheel.Name -match 'tesserocr-\d+\.\d+\.\d+-cp(\d+).*(?:win(32)|amd(64)).*\.whl'
              $packages += @{ wheel = $wheel; py_ver = $Matches[1].Insert(1,'.'); py_ver_str = $Matches[1]; platform_x64 = if ($Matches[3] -eq "64") { $true } else { $false } }
          }
          
          # get Tesseract version from file
          $env:TESSERACT_VERSION = Get-Content -Path tesserocr\dist\tesseract_version.txt -TotalCount 1

          ForEach ($platform_x64 in @($true, $false)) {
              # properly activates conda env for powershell w/o "conda init powershell" being called beforehand
              # (which would require closing and re-opening of powershell session)
              # this is necessary for creating and activating new environments
              # any Miniconda version installed on AppVeyor could be used as long as we update it
              if ($platform_x64) {
                  # download and install miniconda 64bit
                  $filename = "Miniconda3-py39_23.3.1-0-Windows-x86_64.exe"
                  Invoke-WebRequest https://repo.anaconda.com/miniconda/$filename -OutFile $filename
                  Start-Process -FilePath $filename -ArgumentList "/InstallationType=JustMe", "/RegisterPython=0", "/S", "/D=$env:UserProfile\Miniconda3-x64" -Wait -NoNewWindow
                  (& "$env:UserProfile\Miniconda3-x64\Scripts\conda.exe" "shell.powershell" "hook") | Out-String | Invoke-Expression
                  
                  # we want the latest conda to build for the most recent python version 
                  # (since more recent Miniconda versions like Miniconda310 are not yet installed on this AppVeyor image)
                  # conda version >= 23.5.0 is required (only attainable with miniconda >= 3.8) for conda-build on python 3.11,
                  # using "conda update -y -n base -c defaults conda" doesn't work if installed version too far behind
                  conda install -y -n base -c defaults conda=23.5.0
              } else { 
                  # download and install miniconda 32bit
                  $filename = "Miniconda3-py39_4.12.0-Windows-x86.exe"
                  Invoke-WebRequest https://repo.anaconda.com/miniconda/$filename -OutFile $filename
                  Start-Process -FilePath $filename -ArgumentList "/InstallationType=JustMe", "/RegisterPython=0", "/S", "/D=$env:UserProfile\Miniconda3" -Wait -NoNewWindow
                  (& "$env:UserProfile\Miniconda3\Scripts\conda.exe" "shell.powershell" "hook") | Out-String | Invoke-Expression
                  
                  # we want the latest conda to build for the most recent python version
                  # 32bit version is stuck at v4.x
                  conda update -y -n base -c defaults conda
              }
              
              $conda_skip_python_versions = if ($platform_x64) { $conda_skip_python_versions_64 } else { $conda_skip_python_versions_32 }

              ForEach ($package in $packages) {
                  if ($conda_skip_python_versions.Contains($package.py_ver_str)) { Continue }
              
                  # first do all x64 then all x86 packages
                  if ($package.platform_x64 -ne $platform_x64) { Continue }
                  
                  $package_name = $package.wheel.Name
                  $py_ver_str = $package.py_ver_str
                  $py_ver = $package.py_ver
                  
                  # create and activate new conda environment with specified python version
                  conda create -y --name py$py_ver_str python=$py_ver
                  conda activate py$py_ver_str
                  
                  # install requirements
                  conda install -y conda-build
                  
                  # create unique folder and call "conda_setup_build_env.py" to generate meta.yaml and bld.bat for this specific package 
                  if ($platform_x64) { $conda_folder = "conda_py" + $py_ver_str + "_x64" } else { $conda_folder = "conda_py" + $py_ver_str + "_x86" }
                  New-Item $conda_folder -ItemType Directory
                  python res\conda_setup_build_env.py "$PWD\tesserocr\dist\$package_name" $env:TESSERACT_VERSION $conda_folder
                  
                  # finally invoke "conda build"
                  conda build $conda_folder --output-folder conda_build --python $py_ver --no-include-recipe --no-anaconda-upload --old-build-string
              }
              
              # deactivate (not sure if really necessary)
              conda deactivate
          }

          # create archive for convenience
          # x64 / x86 packages will be stored in win-64 / win-32 subfolders respectively
          # call "python upload_to_anaconda.py <path\to\conda_packages" to upload all packages to anaconda
          New-Item conda_packages\win-64 -ItemType Directory
          New-Item conda_packages\win-32 -ItemType Directory
          Copy-Item -Path conda_build\win-64\tesserocr*.tar.bz2 -Destination conda_packages\win-64
          Copy-Item -Path conda_build\win-32\tesserocr*.tar.bz2 -Destination conda_packages\win-32

          Compress-Archive -Path conda_packages/* -DestinationPath conda_packages.zip

    artifacts:
      - path: conda_build\win-*\tesserocr*.tar.bz2
        name: conda_package
      - path: conda_packages.zip
        name: archive
